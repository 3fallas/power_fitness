create or replace NONEDITIONABLE PROCEDURE agregar_usuario (
  p_id IN USUARIO.ID%TYPE,
  p_nombre IN USUARIO.NOMBRE%TYPE,
  p_apellido IN USUARIO.APELLIDO%TYPE,
  p_segundoapellido IN USUARIO.SEGUNDOAPELLIDO%TYPE DEFAULT NULL,
  p_fechanacimiento IN USUARIO.FECHANACIMIENTO%TYPE,
  p_correo IN USUARIO.CORREO%TYPE,
  p_contrasena IN USUARIO.CONTRASENA%TYPE,
  p_telefono IN USUARIO.TELEFONO%TYPE,
  p_direccion IN USUARIO.DIRECCION%TYPE,
  p_id_rol IN USUARIO.ID_ROL%TYPE,
  p_id_membresia IN USUARIO.ID_MENBRESIA%TYPE DEFAULT NULL
) IS
BEGIN
  INSERT INTO USUARIO (
    ID,
    NOMBRE,
    APELLIDO,
    SEGUNDOAPELLIDO,
    FECHANACIMIENTO,
    CORREO,
    CONTRASENA,
    TELEFONO,
    DIRECCION,
    ID_ROL,
    ID_MENBRESIA
  ) VALUES (
    p_id,
    p_nombre,
    p_apellido,
    p_segundoapellido,
    p_fechanacimiento,
    p_correo,
    p_contrasena,
    p_telefono,
    p_direccion,
    p_id_rol,
    p_id_membresia
  );
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Usuario agregado exitosamente.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error al agregar usuario: ' || SQLERRM);
END;


create or replace NONEDITIONABLE PROCEDURE EDITAR_USUARIO (
  p_id IN USUARIO.ID%TYPE,
  p_nombre IN USUARIO.NOMBRE%TYPE,
  p_apellido IN USUARIO.APELLIDO%TYPE,
  p_segundoapellido IN USUARIO.SEGUNDOAPELLIDO%TYPE DEFAULT NULL,
  p_fechanacimiento IN USUARIO.FECHANACIMIENTO%TYPE,
  p_correo IN USUARIO.CORREO%TYPE,
  p_contrasena IN USUARIO.CONTRASENA%TYPE,
  p_telefono IN USUARIO.TELEFONO%TYPE,
  p_direccion IN USUARIO.DIRECCION%TYPE,
  p_id_rol IN USUARIO.ID_ROL%TYPE,
  p_id_membresia IN USUARIO.ID_MENBRESIA%TYPE DEFAULT NULL
) IS
BEGIN
  UPDATE USUARIO
  SET 
    NOMBRE = p_nombre,
    APELLIDO = p_apellido,
    SEGUNDOAPELLIDO = p_segundoapellido,
    FECHANACIMIENTO = p_fechanacimiento,
    CORREO = p_correo,
    CONTRASENA = p_contrasena,
    TELEFONO = p_telefono,
    DIRECCION = p_direccion,
    ID_ROL = p_id_rol,
    ID_MENBRESIA = p_id_membresia
  WHERE ID = p_id;
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('El usuario ' || p_nombre || ' ha sido actualizado exitosamente.');
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('Error al actualizar el usuario ' || p_nombre || ': ' || SQLERRM);
END;

Eliminar usuario

CREATE OR REPLACE PROCEDURE eliminar_usuario (p_id IN NUMBER) AS
BEGIN
  DELETE FROM usuario WHERE id = p_id;
  DBMS_OUTPUT.PUT_LINE('El usuario ha sido eliminado correctamente.');
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('El usuario no existe.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Ha ocurrido un error al eliminar el usuario.');
END eliminar_usuario;

Agregar rol
CREATE OR REPLACE PROCEDURE AGREGAR_ROL(
    P_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2 DEFAULT NULL
)
IS
BEGIN
    INSERT INTO ROLES(ID, NOMBRE, DESCRIPCION)
    VALUES(P_ID, P_NOMBRE, P_DESCRIPCION);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('El rol ha sido agregado correctamente.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error al agregar el rol: '||SQLCODE||' '||SQLERRM);
END AGREGAR_ROL;


Agregar membresia

CREATE OR REPLACE PROCEDURE AGREGAR_MEMBRESIA(
    P_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2,
    P_FECHA_INICIO IN DATE,
    P_FECHA_EXPIRACION IN DATE,
    P_PRECIO IN NUMBER
)
IS
BEGIN
    INSERT INTO membresias(ID, NOMBRE, DESCRIPCION, FECHA_INICIO, FECHA_EXPIRACION, PRECIO)
    VALUES(P_ID, P_NOMBRE, P_DESCRIPCION, P_FECHA_INICIO, P_FECHA_EXPIRACION, P_PRECIO);
END;


eliminar membresia
CREATE OR REPLACE PROCEDURE eliminar_membresia (p_id IN MEMBRESIAS.ID%TYPE)
IS
BEGIN
  DELETE FROM MEMBRESIAS
  WHERE ID = p_id;
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('La membresía con el ID ' || p_id || ' ha sido eliminada.');
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No se encontró ninguna membresía con el ID ' || p_id || '.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Ocurrió un error al eliminar la membresía.');
END eliminar_membresia;



Tabla facturas


CREATE TABLE FACTURAS (
    ID NUMBER(10) PRIMARY KEY,
    FECHA DATE NOT NULL,
    TOTAL NUMBER(8, 2) NOT NULL,
    DESCRIPCION VARCHAR2(200) NOT NULL,
    ID_USUARIO NUMBER(10) REFERENCES USUARIO(ID)
);

CREATE SEQUENCE SEQ_FACTURAS
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TRG_FACTURAS
BEFORE INSERT ON FACTURAS
FOR EACH ROW
BEGIN
    :NEW.ID := SEQ_FACTURAS.NEXTVAL;
END;


tabla equipo
CREATE TABLE equipos_gimnasio (
  ID_EQUIPO NUMBER(10) NOT NULL,
  TIPO VARCHAR2(50),
  MARCA VARCHAR2(50),
  PESO NUMBER(8,2),
  PRECIO NUMBER(8,2),
  NOMBRE VARCHAR2(50),
  CANTIDAD NUMBER(10),
  CONSTRAINT equipos_gimnasio_pk PRIMARY KEY (ID_EQUIPO)
);
Acutlizar Equipo gimnasio
create or replace NONEDITIONABLE PROCEDURE actualizar_equipo_gimnasio(
    id_equipo IN NUMBER,
    tipo IN VARCHAR2,
    marca IN VARCHAR2,
    peso IN NUMBER,
    precio IN NUMBER,
    nombre IN VARCHAR2
)
IS
BEGIN
  UPDATE EQUIPOS_GIMNASIO
  SET TIPO = tipo,
      MARCA = marca,
      PESO = peso,
      PRECIO = precio,
      NOMBRE = nombre
  WHERE ID_EQUIPO = id_equipo;

  IF SQL%ROWCOUNT = 0 THEN
    DBMS_OUTPUT.PUT_LINE('No se encontró el equipo de gimnasio para actualizar.');
  ELSE
    DBMS_OUTPUT.PUT_LINE('Datos del equipo de gimnasio actualizados correctamente.');
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error al actualizar datos del equipo de gimnasio.');
END;

Agregar equipo gimnasio
create or replace NONEDITIONABLE PROCEDURE agregar_equipo_gimnasio(
p_id IN NUMBER,
p_tipo IN VARCHAR2,
p_marca IN VARCHAR2,
p_peso IN NUMBER,
p_precio IN NUMBER,
p_nombre IN VARCHAR2,
p_cantidad IN NUMBER
)
IS
BEGIN
INSERT INTO equipos_gimnasio(ID_EQUIPO, tipo, marca, peso, precio, nombre, cantidad)
VALUES (p_id, p_tipo, p_marca, p_peso, p_precio, p_nombre, p_cantidad);
END agregar_equipo_gimnasio;



Actualizar Usuario
create or replace NONEDITIONABLE PROCEDURE ACTUALIZAR_DATOS_USUARIO (
    p_id INT,
    p_peso FLOAT,
    p_altura FLOAT,
    p_fecha DATE
)
AS
BEGIN
    UPDATE datos_usuario
    SET peso = p_peso, altura = p_altura, fecha = p_fecha
    WHERE id = p_id;
END;



